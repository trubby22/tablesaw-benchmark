Java benchmark

A Java benchmark was developed for the StandardTableSliceGroup::splitOn method. Due to technical difficulties only the enclosing Summarizer::by method was benchmarked (a commented-out non-working fine grained solution is also provided). The following hypothesis was proposed: the execution time is linear with respect to the number of sub-tables generated. The equivalent characteristic equation is shown below.
T = s + p * n
, where s - time spent in the enclosing method and iterating over the input table, n - number of sub-tables generated, p - positive constant factor. The reasoning behind the hypothesis is that there is a for-loop at the end of splitOn that iterates over the generated sub-tables and more sub-tables mean more time spent in the for-loop.

Before each run the date column is replaced with a shuffled column of dates such that there are (k / 100) * (num_of_rows) dates evenly distributed over all the rows. k is a parameter of the benchmark and is tested for the values: 1, 25, 50, 75 and 100.

The results are presented below. Each run has 5 iterations and T denotes the total execution time in ms:
1. k=1, T=76
2. k=25, T=437
3. k=50, T=802
4. k=75, T=1064
5. k=100, T=1377
As the number of bins increases, so does the execution time. A linear best fit line fits the data well. Hence the hypothesis is validated. Using linear regression, we obtain the characteristic equation with parameters:
T = 98 + 0.00538 * n
, where n is as defined before. When no changes are made to the input table, the runtime is 56 ms.

C++ benchmark

The C++ benchmark was designed to resemble the splitOn method. The control flow of the method was simplified because it incurs no performance overhead and does not influence the correctness of the results for the arguments benchmarked. Additionally, String was used instead of ByteArray and StringBuilder, which might have a negative effect on performance. The basic runtime of the C++ implementation is 81 ms, which is higher than the Java one. This might be caused by using String. The results for the parameterised benchmark are presented below:
1. k=1, T=115
2. k=25, T=220
3. k=50, T=302
4. k=75, T=329
5. k=100, T=435
For k=1 the Java implementation is faster. However, for k>=25 the C++ implementation is significantly faster. For k=100 a x3 speedup is present. The reason for that is most likely the fact that object instantiation in Java is more expensive than in C++ and the related fact that Java has a garbage collector that introduces additional overhead while C++ does not have one. In each iteration of the last for-loop a TableSlice (Slice in the C++ implementation) object is initialised. Hence the number of iterations has a large influence on the Java program but a smaller one on the C++ one.
